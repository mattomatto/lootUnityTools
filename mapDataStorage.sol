// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;
 
/**
 * @title mapData
 * @dev Store & retrieve data from a map object
 */
contract mapDataStorage {


    struct EntityData {
    uint8 x;
    uint8 y;
    uint8 entityType;
    }

    bytes mapData;
    
    string constant testFloorsWalls

    EntityData[32] public entityData;

    function mapStringToBytes(string memory mapAsString) public
    {
        mapData = new bytes(128);
        require(mapData.length == 128, "Incorrect map size"); // 32x32 maps are always 1024 bits aka 128 bytes
        mapData = bytes(mapAsString);
    }
    
    function testDataToBytes(string memory str) public 
    {
        //mapData = (bytes)str;
    }
     
    function returnTestString() public pure returns (string memory)
    {
        return testFloorsWalls;
    }
    
    
    function getMapAsString() public view returns(string memory)
    {
        string memory s  = bytesArrayToString(mapData);
        return s;
    }
    
    function stringToBytesArray(string memory str) public pure returns (bytes memory){
        return bytes(str);
    } 
    
    function bytesArrayToString(bytes memory _bytes) public pure returns (string memory) {
        return string(_bytes);
    }
}
